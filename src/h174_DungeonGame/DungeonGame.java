package h174_DungeonGame;

/**
 * 174. 地下城游戏
 *
 * 一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被
 * 安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。
 * 骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。
 * 有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；
 * 其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。
 *
 * 为了尽快到达公主，骑士决定每次只向右或向下移动一步。
 *
 * 编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。
 *
 * 例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -> 右 -> 下 -> 下，则骑士的初始健康点数至少为 7。
 *
 * -2 (K)	-3	    3
 * -5	    -10	    1
 * 10	    30	    -5 (P)
 *  
 *
 * 说明:
 * 骑士的健康点数没有上限。
 * 任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。
 *
 */
public class DungeonGame {

    /**
     * 解法1：DP（从右下向左上递推）
     *
     * 从左上向右下递推：没办法将"每个格子最多能获得多少血量"，转换成"初始时至少是多少血量”。
     * 从右下向左上递推：dp[i][j] 即代表若要达到 [i][j] 所表示的位置，至少要有多少血量，才能在行走的过程中至少保持生命值为1。
     *
     * 例如：若代表地牢的二维数组为1*1的，那么：dp[0][0] = max(1， 1 - dungeon[0][0])
     * 这里需要考虑dungeon[0][0]为正为负为零这三种情况：
     *      1、若 dungeon[0][0] = -5，dp[0][0] = max(1， 6) = 6
     *      2、若 dungeon[0][0] = 0，dp[0][0] = max(1， 1) = 1
     *      3、若 dungeon[0][0] = 3，dp[0][0] = max(1， -2) = 1
     *
     * 若代表地牢的二维数组为 1*n 或 m*1 的
     * 1*n，i从n-2至0：dp[0][i] = max(l, dp[0][i+1] - dungeon[0][i])
     * n*1，i从n-2至0：dp[i][0] = max(l, dp[i+1][0] - dungeon[i][0])
     *
     * 若代表地牢的二维数组为 n*m 的：
     *      i代表行，从n-2至0
     *          j代表列，从m-2至0：
     *              设 dp_min = min(dp[i+1][j], dp[i][j+1])
     *              dp[i][j] = max(1， dp_min - dungeon[i][j])
     */
    public int calculateMinimumHP(int[][] dungeon) {
        if (dungeon == null || dungeon.length == 0 || dungeon[0].length == 0) return 0;
        int m = dungeon.length;
        int n = dungeon[0].length;
        int[][] dp = new int[m][n];
        dp[m - 1][n - 1] = Math.max(1, 1 - dungeon[m - 1][n - 1]);
        for (int i = m - 2; i >= 0; i--) {
            dp[i][n - 1] = Math.max(1, dp[i + 1][n - 1] - dungeon[i][n - 1]);
        }
        for (int j = n - 2; j >= 0; j--) {
            dp[m - 1][j] = Math.max(1, dp[m - 1][j + 1] - dungeon[m - 1][j]);
        }
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                int dp_min = Math.min(dp[i+1][j], dp[i][j+1]);
                dp[i][j] = Math.max(1, dp_min - dungeon[i][j]);
            }
        }
        return dp[0][0];
    }
}
